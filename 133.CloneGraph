/*
// Definition for a Node.
public class Node {
    public int val;
    public IList<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new List<Node>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new List<Node>();
    }

    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

public class Solution {
    public Node CloneGraph(Node node) {
        if(node == null)
           return null;

        // create a dictionary what will contain the clones,
        // a dict also ensures that we don't create a cloned node multiple times
        var visitedDict = new Dictionary<Node, Node>();

        // put clone first one with it's connected nodes yet to be cloned
        visitedDict[node] = new Node(node.val, new List<Node>());
        var queue = new Queue<Node>();
        queue.Enqueue(node);

        while(queue.Count() >0)
        {
            Node current = queue.Dequeue();
            foreach(Node neighbor in current.neighbors)
            {
                if(!visitedDict.ContainsKey(neighbor))
                {
                    // Add neighbor to be proccessed later
                    visitedDict[neighbor] = new Node(neighbor.val, new List<Node>());

                    // Add neighbor to be proccessed later
                    queue.Enqueue(neighbor);
                }
                // put in the value of the current node (that will return it's clone)
                // so put in that clone neighbors that neighbor dictionry 'Value'/Clone
                visitedDict[current].neighbors.Add(visitedDict[neighbor]);
            }
        }

        return visitedDict[node];
    }
}
