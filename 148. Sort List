/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode SortList(ListNode head) {
        if(head == null || head.next == null)
        {
            return head;
        }
        var left = head;
        var right = getMiddle(head);

        // here we make sure left is now detached from the point right begains
        // so the split is done correctly else it will never end splitting
        var temp = right.next;
        right.next = null; // detaching
        right = temp; // now only right pointer continue to the end

        left = SortList(left);
        right = SortList(right);
        return merge(left, right);
    }
    private ListNode getMiddle(ListNode node)
    {
        var fast = node.next;
        var slow = node;
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    private ListNode merge(ListNode node1, ListNode node2)
    {
        var list = new ListNode(0); // the moving pointer
        var head = list; // a non moving head
        while(node1 != null && node2 != null)
        {
            if(node1.val <= node2.val)
            {
                list.next = node1;
                node1 = node1.next;
            }
            else
            {
                list.next = node2;
                node2 = node2.next;
            }
            list = list.next;
        }
        if(node1 == null)
          list.next = node2;
        if( node2 == null)
           list.next = node1;

        return head.next;
    }
}
