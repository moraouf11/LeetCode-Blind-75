public class Solution {
    public int GetMaxLen(int[] nums) {
        int res =0;
        int product =1;
        int startindex =0;
        int lastzeroindex =0;
        int firstnegInd = -1;

        for (int i = 0; i < nums.Length; i++) 
        {
            if(nums[i] == 0)
            {
                product =1;
                startindex =i+1;
                lastzeroindex = i;
                firstnegInd =-1;
            }
            else 
            { 
              if(nums[i] < 0)
                { 
                    product = -product;
                }

                if(product >0)
                   res = Math.Max(res, i - startindex +1);
                else 
                  {
                    if(firstnegInd != -1)
                    {
                        res = Math.Max(res, i - firstnegInd);
                    }
                    else 
                      firstnegInd = i;
                  } 
              }
        }
        return res;

    }
}




            // if(num < 0 && negatives ==1)
            //    {
            //     negatives=0;
            //     local+= beforezero;
            //     local++;
            //     res = Math.Max(local, res);
            //    }
            // else if(num < 0 && negatives ==0)
            //    {
            //     negatives=1;
            //     beforezero = ++local; //2 
            //     local = 0; 
            //    }
            // else if(num ==0)
            // {
            //     res = Math.Max(local, res);
            //     beforezero = 0;
            //     negatives =0;
            //     local =0;
            // }
            // else
            //    {
            //     local++;
            //     res = Math.Max(local, res);
            //    } 
