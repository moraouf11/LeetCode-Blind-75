
public class Solution {
    public int NumIslands(char[][] grid) {
        int count =0;
        for(int i =0; i < grid.Length; i++)
        {
            for(int j =0; j< grid[0].Length;  j++)
              {
                if(grid[i][j] =='1')
                   {
                    dfs(i,j);
                    count++;
                   }
              }
        }


        void dfs(int i, int j)
        {
            if(i < 0 || i >= grid.Length || j < 0 || j >= grid[0].Length  || grid[i][j] =='0' )
            {
                return;
            }
            grid[i][j] ='0';
            dfs(i+1, j); dfs(i-1, j) ; dfs(i, j+1) ; dfs(i, j-1);
        }
        return count;
    }
}







// public class Solution {
//     public int NumIslands(char[][] grid) {
//        // var visited = new HashSet<int[][]>();
//         HashSet<(int, int)> visited = new HashSet<(int, int)>();
//         int count =0;
//         for(int i =0; i < grid.Length; i++)
//         {
//             for(int j =0; j< grid[0].Length;  j++)
//               {
//                 if(grid[i][j] =='1' && dfs(i,j))
//                    count++;
//               }
//         }


//         bool dfs(int i, int j)
//         {
//             if(i < 0 || i >= grid.Length || j < 0 || j >= grid[0].Length || visited.Contains((i, j)) || grid[i][j] =='0' )
//             {
//                return false;
//             }
//             visited.Add((i,j));
//             if(dfs(i+1, j) || dfs(i-1, j) || dfs(i, j+1) || dfs(i, j-1));
//                return true;
//             return true;
//         }
//         return count;
//     }
// }
