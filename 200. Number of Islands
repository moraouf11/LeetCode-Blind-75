public class Solution {
    // dfs , why ?
    // The idea is to visit each node and make sure it's neighbot is not one and not visited ,
    // if so then it's an island 
    //string[][] myArray = new string[][] { new string[] { "1" } };
    // Console.WriteLine($"Rows: {myArray.Length}");
    // Console.WriteLine($"Columns: {myArray[0].Length}");
    public int NumIslands(char[][] grid) {
        int count =0;
        int rows = grid.Length;
        int cols = grid[0].Length;

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                if (grid[i][j]== '1')
                {
                    DFS(grid, i, j, rows, cols);
                    count++;
                }
            }
        }
        return count;
    }

    private void DFS(char[][] grid, int i, int j, int rows, int cols)
    {
        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] =='0')
            return;

        grid[i][j] = '0'; // Mark the visited land as water
        DFS(grid, i + 1, j, rows, cols);
        DFS(grid, i - 1, j, rows, cols);
        DFS(grid, i, j + 1, rows, cols);
        DFS(grid, i, j - 1, rows, cols);
    }
}
