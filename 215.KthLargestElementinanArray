public class Solution {
    public int FindKthLargest(int[] nums, int k) {
          var pq = new PriorityQueue<int, int>();
          foreach(int num in nums)
          {
            pq.Enqueue(num, num);
          }
          int result =0;
          for(int i = 0;i <= nums.Length-k; i++ )
          {
            result = pq.Dequeue();
          }

          return result;

    }
}



public class Solution {
    public int FindKthLargest(int[] nums, int k) {
        return quickSelect(nums, 0, nums.Length - 1, nums.Length - k);
    }

    private int quickSelect(int[] nums, int l, int r, int k) {
        if (l <= r) {
            int pivotIndex = partition(nums, l, r);
            if (pivotIndex == k) {
                return nums[pivotIndex];
            } else if (pivotIndex > k) {
                return quickSelect(nums, l, pivotIndex - 1, k);
            } else {
                return quickSelect(nums, pivotIndex + 1, r, k);
            }
        }
        return int.MinValue; // This should never be reached
    }

    private int partition(int[] nums, int l, int r) {
        int pivot = nums[r];
        int i = l;
        for (int j = l; j < r; j++) {
            if (nums[j] < pivot) {
                swap(nums, i, j);
                i++;
            }
        }
        swap(nums, i, r);
        return i;
    }

    private void swap(int[] nums, int l, int r) {
        int temp = nums[r];
        nums[r] = nums[l];
        nums[l] = temp;
    }
}
