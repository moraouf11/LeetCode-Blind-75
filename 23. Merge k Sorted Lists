/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) {
        if(lists == null || lists.Length == 0)
            return null;
        
        int j = lists.Length-1;
        while(j > 0)
        {
            int i = 0;
            while(i < j)
            {
                lists[i] = MergeLists(lists[i], lists[j]);
                i++;
                j--;
            }
        }
        return lists[0];

        ListNode MergeLists(ListNode a, ListNode b)
        {
            if(a == null)
               return b;
            if(b == null)
               return a;
            
            ListNode result;

            if(a.val < b.val)
               {
                result = a;
                result.next = MergeLists(a.next, b);
               }
               else
               {
                result = b;
                result.next = MergeLists(b.next, a);
               }
               return result;
        }

    }
}





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) {
        if(lists == null || lists.Length ==0)
           return null;

        var result = lists[0];

        for(int i =1; i< lists.Length; i++)
        {
            result = Merge(result, lists[i]);
        }

        return result;

    }

    private ListNode Merge(ListNode l1, ListNode l2)
    {
        if(l1 == null && l2 == null)
           return null;
        
        if(l1 == null)
           return l2;
        if(l2 == null)
          return l1;
        if(l1.val > l2.val)
           {
             l2.next = Merge(l1, l2.next);
             return l2;
           }
        else 
           {
            l1.next = Merge(l1.next, l2);
            return l1;
           }

    }
}





