/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
// public class NestedIterator {

//     List<int> flattened = new();
//     int index =0;
//     public NestedIterator(IList<NestedInteger> nestedList) {
//         flattened = Flatten(nestedList);
//     }

//     private List<int> Flatten(IList<NestedInteger> main)
//     {
//         List<int> result = new List<int>();
//         foreach(var ni in main)
//         {
//             if(ni.IsInteger())
//                result.Add(ni.GetInteger());
//             else 
//                result.AddRange(Flatten(ni.GetList()));
//         }
//         return result;

//     }

//     public bool HasNext() {
//         return index < flattened.Count ;
//     }

//     public int Next() {
//         return flattened[index++];
//     }
// }


public class NestedIterator {
    Queue<int> q;
    public NestedIterator(IList<NestedInteger> nestedList) {
        q=new Queue<int>();
        DFS(nestedList);
    }
    void DFS(IList<NestedInteger> nestedList)
    {
        for(int i=0;i<nestedList.Count;i++)
        {
            if(nestedList[i].IsInteger())
            {
                q.Enqueue(nestedList[i].GetInteger());
            }
            else
            {
                DFS(nestedList[i].GetList());
            }
        }
    }

    public bool HasNext() {
         return q.Count!=0;
    }

    public int Next() {
        return q.Dequeue();
    }
}

/**
 * Your NestedIterator will be called like this:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.HasNext()) v[f()] = i.Next();
 */
