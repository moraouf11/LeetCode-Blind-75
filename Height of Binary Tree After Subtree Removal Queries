/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    Dictionary<int, int> depths = new Dictionary<int, int>();
    Dictionary<int, int> heights = new Dictionary<int, int>();
    public int[] TreeQueries(TreeNode root, int[] queries) {

        // my solution , decent but not effiecient // O(q*n) time
    //     int[] answers = new int[queries.Length];
    //     int i =0;
    //     foreach(var q in queries)
    //     {
    //         answers[i] = getHeight(root, q) -1;
    //         i++;
    //     }
    //     return answers;
    // }
    // private int getHeight(TreeNode root, int query)
    // {
    //     if(root == null || root.val == query)
    //       return 0;

    //     int leftH = getHeight(root.left, query);
    //     int rightH = getHeight(root.right, query);

    //     return Math.Max(leftH, rightH) +1;
    //}

    // better solution , O(n) time and space, not complete

        DFS(root, 0);
        var groupedDepths = depths.GroupBy(kv => kv.Value)
                                    .ToDictionary(
                                        g => g.Key,          
                                        g => g.Select(kv => kv.Key).OrderByDescending(x => x).ToList()
                                    );
        int[] answers = new int[queries.Length];
        int i =0;
        foreach(var q in queries)
        {
            int depth = depths[q];
            var depthGroup = groupedDepths[depth];
            if (depthGroup.Count == 1) {
                answers[i] = depth - 1;
            } else if (depthGroup[0] == q) {
                answers[i] = heights[depthGroup[1]] + depth;
            } else {
                answers[i] = depths[root.val];
            } 
            i++;
        }
        // for (int i = 0; i < queries.length; i++) {
        //     int q = queries[i];
        //     int depth = nodeDepth.get(q);
        //     List<int[]> depthGroup = depthGroups.get(depth);

        //     if (depthGroup.size() == 1) {
        //         result[i] = depth - 1;
        //     } else if (depthGroup.get(0)[1] == q) {
        //         result[i] = depthGroup.get(1)[0] + depth;
        //     } else {
        //         result[i] = depthGroup.get(0)[0] + depth;
        //     }
        // }
        return answers;
    }
    private int DFS(TreeNode node, int depth)
    {
        if(node == null)
          return 0;
        depths[node.val] = depth;
        int leftH = DFS(node.left, depth+1);
        int rightH = DFS(node.right, depth+1);
        int height = Math.Max(leftH, rightH) +1;
        heights[node.val] = height;
        return height;
    }

}
