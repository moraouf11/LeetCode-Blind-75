/*
// Definition for a Node.
public class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
}
*/

public class Solution {
    public Node Connect(Node root) {
        
        // var levelQ = new Queue<(Node, int)>();
        // if(root == null) return root;

        // levelQ.Enqueue((root, 0));
        // while(levelQ.Count >0)
        // {
        //     var nodeItem = levelQ.Dequeue();
        //     var node = nodeItem.Item1;
        //     var level = nodeItem.Item2;
        //     if( levelQ.Count >0 && levelQ.Peek().Item2 == level)
        //     {
        //         node.next = levelQ.Peek().Item1;
        //     }
        //     else 
        //        node.next = null;

        //     if (node.left != null) levelQ.Enqueue((node.left, level + 1));
        //     if (node.right != null) levelQ.Enqueue((node.right, level + 1));
        // }
        // return root;

        
        //### Similar solution but the way it segrgates levels is by storing the curreny count 
        //### in a variable and running it out and setting last one to null and so on;
        
        // if (root == null) return null;

        // var levelQ = new Queue<Node>();
        // levelQ.Enqueue(root);

        // while (levelQ.Count > 0) {
        //     int size = levelQ.Count;
        //     Node prev = null;

        //     for (int i = 0; i < size; i++) {
        //         var node = levelQ.Dequeue();
                
        //         if (prev != null) {
        //             prev.next = node;
        //         }
        //         prev = node;

        //         if (node.left != null) levelQ.Enqueue(node.left);
        //         if (node.right != null) levelQ.Enqueue(node.right);
        //     }
        //     prev.next = null; // Last node in the level
        // }

        // return root;

        // best solution as it uses no extra space, builds on previously connected nodes
        if (root == null)
        {
            return null;
        }

        var mostleft = root;

        while (mostleft.left != null)
        {
            var current = mostleft;

            while (current != null)
            {
                current.left.next = current.right;

                if (current.next != null)
                {
                    current.right.next = current.next.left;
                }

                current = current.next;
            }

            mostleft = mostleft.left;
        }

        return root;
    }

}
